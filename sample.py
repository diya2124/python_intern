import json5
import re
import os
import requests
import matplotlib.pyplot as plt

# Function to load configuration with support for comments
def load_config(path="config.json"):
    """
    Load the configuration from a JSON5 file.
    
    Args:
        path (str): Path to the configuration file. Defaults to 'config.json'.
    
    Returns:
        dict: The configuration dictionary.
    
    Raises:
        FileNotFoundError: If the file cannot be found.
        json.JSONDecodeError: If there are errors in the JSON5 format.
        Exception: For any other errors that occur while loading the file.
    """
    try:
        with open(path, "r", encoding="utf-8") as file:
            config = json5.load(file)  # Load the config using json5 to allow comments
    except FileNotFoundError:
        print(f"‚ùå Error: The file {path} was not found.")
        raise
    except json.JSONDecodeError as e:
        print(f"‚ùå Error: Failed to decode JSON in {path}. Please check the file for errors.")
        print(f"Details: {e}")
        raise
    except Exception as e:
        print(f"‚ùå Unexpected error while loading {path}: {str(e)}")
        raise

    return config

# Function to analyze the markdown file
def analyze_markdown(filepath, config):
    """
    Analyze the content of the markdown file and generate a report.

    Args:
        filepath (str): Path to the markdown file to analyze.
        config (dict): Configuration settings for the analysis.

    Returns:
        dict: A report with metrics like word count, headings, links, etc.
    """
    report = {
        "Total Words": 0,
        "Headings": 0,
        "Links Found": 0,
        "Valid Links": 0,
        "Broken Links": [],
        "Images": 0
    }

    with open(filepath, "r", encoding="utf-8") as file:
        content = file.read()

    words = [w for w in re.findall(r'\b\w+\b', content) if len(w) >= config["analysis"]["min_word_length"]]
    report["Total Words"] = len(words)

    if config["analysis"]["include_headings"]:
        report["Headings"] = len(re.findall(r'^#+ ', content, re.MULTILINE))

    if config["analysis"]["include_links"]:
        links = re.findall(r'\[(.*?)\]\((https?://[^\s)]+)\)', content)
        report["Links Found"] = len(links)

        if config["link_validation"]["validate_links"]:
            headers = {"User-Agent": config["link_validation"]["user_agent"]}
            for text, url in links:
                try:
                    res = requests.head(url, timeout=config["link_validation"]["timeout"], allow_redirects=config["link_validation"]["allow_redirects"], headers=headers)
                    if res.status_code < 400:
                        report["Valid Links"] += 1
                    else:
                        report["Broken Links"].append(url)
                except:
                    report["Broken Links"].append(url)

    if config["analysis"]["include_images"]:
        report["Images"] = len(re.findall(r'!\[.*?\]\((.*?)\)', content))

    return report

# Function to generate a chart based on the report
def generate_chart(report, config, output_path='chart.png'):
    """
    Generate a bar chart visualizing the markdown analysis report.

    Args:
        report (dict): The analysis report generated by analyze_markdown.
        config (dict): Configuration settings for the visual report.
        output_path (str): Path to save the generated chart.
    """
    visual = config.get("visual_report", {})
    width = visual.get("chart_width", 10)
    height = visual.get("chart_height", 20)
    colors = visual.get("link_colors", ['skyblue', 'purple', 'lightgreen', 'green', 'salmon'])

    labels = ["Words", "Headings", "Links", "Valid Links", "Images"]
    values = [
        report["Total Words"],
        report["Headings"],
        report["Links Found"],
        report["Valid Links"],
        report["Images"]
    ]

    # Guard against invalid values
    if not all(isinstance(v, (int, float)) for v in values):
        print("‚ö†Ô∏è Invalid data found in the report. Cannot generate chart.")
        return

    plt.figure(figsize=(width, height))
    bars = plt.bar(labels, values, color=colors)

    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, yval + 2, int(yval), ha='center')

    plt.title("Markdown File Analysis")
    plt.ylabel("Count")
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()
    print(f"üìä Chart saved as {output_path}")

# Function to generate an HTML report based on the analysis
def generate_html_report(report, config, chart_path='chart.png', output_file='report.html'):
    """
    Generate an HTML report based on the markdown analysis.

    Args:
        report (dict): The analysis report generated by analyze_markdown.
        config (dict): Configuration settings for the visual report.
        chart_path (str): Path to the chart image to include in the HTML report.
        output_file (str): Path to save the generated HTML report.
    """
    visual = config.get("visual_report", {})
    font = visual.get("font_family", "Arial, sans-serif")
    margin = visual.get("margin", "20px")
    color = visual.get("content_color", "black")

    html_content = f"""
    <html>
    <head>
        <title>Markdown Analysis Report</title>
        <style>
            body {{ font-family: {font}; margin: {margin}; color: {color}; }}
            h1 {{ color: #333; }}
            table {{ border-collapse: collapse; width: 50%; }}
            th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            img {{ margin-top: 20px; max-width: 600px; }}
        </style>
    </head>
    <body>
        <h1>Markdown Analysis Report</h1>
        <table>
            <tr><th>Metric</th><th>Value</th></tr>
            <tr><td>Total Words</td><td>{report["Total Words"]}</td></tr>
            <tr><td>Headings</td><td>{report["Headings"]}</td></tr>
            <tr><td>Links Found</td><td>{report["Links Found"]}</td></tr>
            <tr><td>Valid Links</td><td>{report["Valid Links"]}</td></tr>
            <tr><td>Broken Links</td><td>{len(report["Broken Links"])}</td></tr>
            <tr><td>Images</td><td>{report["Images"]}</td></tr>
        </table>
        <img src="{chart_path}" alt="Markdown Analysis Chart">
    </body>
    </html>
    """

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_content)
    print(f"‚úÖ HTML report saved as {output_file}")

# Example usage
if __name__ == "__main__":
    config = load_config("config.json")  # Load the config file using json5
    file_path = r'C:\Users\diyac\OneDrive\Desktop\internship\python_intern\sample.md'
    report = analyze_markdown(file_path, config)

    if report:
        print("‚úÖ Report Generated:", report)
        generate_chart(report, config)
        generate_html_report(report, config)
    else:
        print("‚ùå Failed to generate report.")
